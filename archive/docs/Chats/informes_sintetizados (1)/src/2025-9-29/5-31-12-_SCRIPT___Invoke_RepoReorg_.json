{"title":"<SCRIPT - Invoke-RepoReorg>","create_time":1759145472.553397,"update_time":1759145857.933724,"mapping":{"client-created-root":{"id":"client-created-root","message":null,"parent":null,"children":["9e02d0d5-3e14-40ef-be46-f8f993967571"]},"9e02d0d5-3e14-40ef-be46-f8f993967571":{"id":"9e02d0d5-3e14-40ef-be46-f8f993967571","message":{"id":"9e02d0d5-3e14-40ef-be46-f8f993967571","author":{"role":"system","name":null,"metadata":{}},"create_time":null,"update_time":null,"content":{"content_type":"text","parts":[""]},"status":"finished_successfully","end_turn":true,"weight":0,"metadata":{"is_visually_hidden_from_conversation":true},"recipient":"all","channel":null},"parent":"client-created-root","children":["b925ca7a-21f9-41b9-b7bc-5bc06ef7ed83"]},"b925ca7a-21f9-41b9-b7bc-5bc06ef7ed83":{"id":"b925ca7a-21f9-41b9-b7bc-5bc06ef7ed83","message":{"id":"b925ca7a-21f9-41b9-b7bc-5bc06ef7ed83","author":{"role":"system","name":null,"metadata":{}},"create_time":null,"update_time":null,"content":{"content_type":"text","parts":[""]},"status":"finished_successfully","end_turn":true,"weight":0,"metadata":{"rebase_developer_message":true,"is_visually_hidden_from_conversation":true},"recipient":"all","channel":null},"parent":"9e02d0d5-3e14-40ef-be46-f8f993967571","children":["90269976-14bb-489e-97c6-f3e0035d5765"]},"90269976-14bb-489e-97c6-f3e0035d5765":{"id":"90269976-14bb-489e-97c6-f3e0035d5765","message":{"id":"90269976-14bb-489e-97c6-f3e0035d5765","author":{"role":"system","name":null,"metadata":{}},"create_time":1759145470.2734284,"update_time":null,"content":{"content_type":"text","parts":[""]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"attachments":[{"id":"file-G5s3HTuZLcZ2iCn5CGjYEf","name":"Auditoria_AR.zip","mimeType":"application/zip","fileSizeTokens":null}],"is_visually_hidden_from_conversation":true},"recipient":"all","channel":null},"parent":"b925ca7a-21f9-41b9-b7bc-5bc06ef7ed83","children":["63d117cf-2a67-4e23-84ec-26ccb9c9b11a"]},"63d117cf-2a67-4e23-84ec-26ccb9c9b11a":{"id":"63d117cf-2a67-4e23-84ec-26ccb9c9b11a","message":{"id":"63d117cf-2a67-4e23-84ec-26ccb9c9b11a","author":{"role":"user","name":null,"metadata":{}},"create_time":1759145468.56,"update_time":null,"content":{"content_type":"text","parts":["Analiza y explica que hace el siguiente script:\n\n```\n# Patch-Verify_Project_Modularize.ps1\r\n# Reorganiza el macroscript en módulos con marcadores claros y lo renombra a Verify_Project.ps1.\r\n# Crea stub de compatibilidad para Invoke-RepoReorg.ps1, conserva backups y actualiza CHANGELOG.\r\n#requires -Version 5.1\r\nSet-StrictMode -Version 3.0\r\n$ErrorActionPreference = 'Stop'\r\n\r\n# --- Rutas del proyecto (Windows) ---\r\n$RepoRootWin  = 'C:\\Users\\VictorFabianVeraVill\\Desktop\\Repo_AR'\r\n$ScriptsDir   = Join-Path $RepoRootWin 'SCRIPTS'\r\n$OldPath      = Join-Path $ScriptsDir  'Invoke-RepoReorg.ps1'\r\n$NewPath      = Join-Path $ScriptsDir  'Verify_Project.ps1'\r\n$BackupsDir   = Join-Path $ScriptsDir  'BACKUPS'\r\n$ChangelogWin = Join-Path $RepoRootWin 'CHANGELOG.md'\r\n# --- Ruta espejo opcional para asistente ---\r\n$ChangelogBot = '/mnt/data/Repo_AR/CHANGELOG.md'\r\n\r\n# --- Utilidades locales del parche ---\r\nfunction New-TS { [DateTime]::UtcNow.ToString('yyyyMMdd_HHmmssfff') }\r\nfunction Ensure-Dir([string]$Path){\r\n  if (-not (Test-Path -LiteralPath $Path)) { New-Item -ItemType Directory -Path $Path -Force | Out-Null }\r\n  (Resolve-Path -LiteralPath $Path).Path\r\n}\r\nfunction Write-Utf8NoBom {\r\n  param([Parameter(Mandatory)][string]$Path,[Parameter(Mandatory)][string]$Content,[switch]$Append)\r\n  $dir = Split-Path -Parent $Path\r\n  if ($dir) { Ensure-Dir $dir | Out-Null }\r\n  $utf8 = New-Object System.Text.UTF8Encoding($false)\r\n  if ($Append){ [IO.File]::AppendAllText($Path,$Content,$utf8) } else { [IO.File]::WriteAllText($Path,$Content,$utf8) }\r\n}\r\n\r\n# --- Validaciones previas ---\r\nEnsure-Dir $ScriptsDir | Out-Null\r\nEnsure-Dir $BackupsDir | Out-Null\r\nif (-not (Test-Path -LiteralPath $OldPath)) { throw \"No existe $OldPath; se requiere para versionar y dejar stub.\" }\r\n\r\n# --- Respaldo del archivo actual ---\r\n$BackupPath = Join-Path $BackupsDir (\"Invoke-RepoReorg_{0}.bak\" -f (New-TS))\r\nCopy-Item -LiteralPath $OldPath -Destination $BackupPath -Force\r\n\r\n# --- Contenido del NUEVO macroscript modular: Verify_Project.ps1 ---\r\n$VerifyProjectContent = @'\r\n# Verify_Project.ps1 — Auditoría y verificación de proyecto (PAVC-Compat 2025-09)\r\n# Uso:\r\n#   .\\Verify_Project.ps1 [-RepoRoot <ruta>] [-RunPSSA] [-RunInlineTests]\r\n# Notas:\r\n#   - Compatible PS 5.1 y 7.x\r\n#   - No modifica contenido de PI/SOP; valida estructura, normaliza BACKUPS, registra PAVC\r\n#   - Marcadores de módulos para parches granulares (ReplaceBetweenMarkers)\r\n\r\n# [BEGIN MODULE: Parameters]\r\n[CmdletBinding(SupportsShouldProcess, ConfirmImpact='Medium')]\r\nparam(\r\n  [string]$RepoRoot,\r\n  [switch]$RunInlineTests,\r\n  [switch]$RunPSSA\r\n)\r\n# [END MODULE: Parameters]\r\n\r\n# [BEGIN MODULE: Globals]\r\nSet-StrictMode -Version 3.0\r\n$ErrorActionPreference = 'Stop'\r\n$Script:Version             = '3.0.0-PAVC'\r\n$Script:DefaultRepoRoot     = 'C:\\Users\\VictorFabianVeraVill\\Desktop\\Repo_AR'\r\n$Script:GlobalChangeLogPath = $null\r\n$Script:PAVC_Tag            = 'PAVC-Compat (2025-09)'\r\n# [END MODULE: Globals]\r\n\r\n# [BEGIN MODULE: IO.Utils]\r\nfunction Write-Utf8NoBom {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$Path,[Parameter(Mandatory)][string]$Content,[switch]$Append)\r\n  $dir = Split-Path -Parent $Path\r\n  if ($dir -and -not (Test-Path -LiteralPath $dir)) { New-Item -ItemType Directory -Path $dir -Force | Out-Null }\r\n  $utf8 = New-Object System.Text.UTF8Encoding($false)\r\n  if ($Append){ [IO.File]::AppendAllText($Path,$Content,$utf8) } else { [IO.File]::WriteAllText($Path,$Content,$utf8) }\r\n}\r\nfunction New-Timestamp { [DateTime]::UtcNow.ToString('yyyyMMdd_HHmmssfff') }\r\nfunction Resolve-RepoRoot {\r\n  [CmdletBinding()]\r\n  param([string]$RepoRoot)\r\n  if ([string]::IsNullOrWhiteSpace($RepoRoot)) {\r\n    if ($env:ANASTASIS_REPO_ROOT) { $RepoRoot = $env:ANASTASIS_REPO_ROOT } else { $RepoRoot = $Script:DefaultRepoRoot }\r\n  }\r\n  if (-not (Test-Path -LiteralPath $RepoRoot)) { throw [IO.DirectoryNotFoundException]::new(\"RepoRoot no encontrado: $RepoRoot\") }\r\n  (Resolve-Path -LiteralPath $RepoRoot).Path\r\n}\r\nfunction Ensure-Directory {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$Path)\r\n  if (-not (Test-Path -LiteralPath $Path)) { New-Item -ItemType Directory -Path $Path -Force | Out-Null }\r\n  (Resolve-Path -LiteralPath $Path).Path\r\n}\r\n# [END MODULE: IO.Utils]\r\n\r\n# [BEGIN MODULE: Logging]\r\nfunction Append-GlobalChangeLog {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$Message,[string]$Extra = $null)\r\n  if (-not $Script:GlobalChangeLogPath) { return }\r\n  $hr   = ('-'*80)\r\n  $hdr  = (\"{0} — Verify_Project v{1} — {2}\" -f ([DateTime]::UtcNow.ToString('u')),$Script:Version,$Script:PAVC_Tag)\r\n  $body = if ($Extra) { \"$Message`r`n$Extra\" } else { $Message }\r\n  $entry = \"$hr`r`n$hdr`r`n$body`r`n$hr`r`n\"\r\n  Write-Utf8NoBom -Path $Script:GlobalChangeLogPath -Content $entry -Append\r\n\r\n  $mirrorDir = '/mnt/data/Repo_AR'\r\n  if (Test-Path -LiteralPath $mirrorDir) {\r\n    $mirror = Join-Path $mirrorDir 'CHANGELOG.md'\r\n    Write-Utf8NoBom -Path $mirror -Content $entry -Append\r\n  }\r\n}\r\nfunction Write-ChangeLog {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(Mandatory)][string]$TargetPath,\r\n    [Parameter(Mandatory)]\r\n    [ValidateSet('Add','Append','ReplaceFile','Move','CreateStub','ReplaceBetweenMarkers','Other')]\r\n    [string]$Mode,\r\n    [ValidateLength(1,4096)][string]$Summary='[No summary]'\r\n  )\r\n  $full = Resolve-Path -LiteralPath $TargetPath -ErrorAction Stop\r\n  $f = Get-Item -LiteralPath $full\r\n  $dir = Ensure-Directory -Path (Join-Path $f.DirectoryName 'Changelogs')\r\n  $ts  = [DateTime]::UtcNow\r\n  $safe = ($f.Name -replace '[^A-Za-z0-9\\.\\-_]','_')\r\n  $name = ('{0:yyyyMMdd_HHmmssfff}_{1}_{2}.md' -f $ts,$safe,$Mode)\r\n  $path = Join-Path $dir $name\r\n  $doc = @\"\r\n# Changelog Entry\r\n- UTC: $($ts.ToString('u'))\r\n- File: $($f.FullName)\r\n- Mode: $Mode\r\n- Summary: $Summary\r\n\"@\r\n  Write-Utf8NoBom -Path $path -Content $doc\r\n  Append-GlobalChangeLog -Message (\"{0:u} | {1} | {2} | {3}\" -f $ts,$f.FullName,$Mode,$Summary)\r\n  $path\r\n}\r\n# [END MODULE: Logging]\r\n\r\n# [BEGIN MODULE: Safety.FenceCheck]\r\nfunction Test-FenceSafety {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory,ValueFromPipeline,ValueFromPipelineByPropertyName)][string[]]$Path)\r\n  process {\r\n    foreach ($p in $Path) {\r\n      if (-not (Test-Path -LiteralPath $p)) { continue }\r\n      $text = Get-Content -LiteralPath $p -Raw -Encoding UTF8\r\n      $issues = @()\r\n      $grave = [char]0x60\r\n      if ($text -match \"$grave{5}\") { $issues += 'Uso de 5 backticks detectado; preferir 5 tildes ~~~~~ para artefactos.' }\r\n      if ($text -match \"^\\s+['\"\"]@\") { $issues += 'Cierre de here-string con indentación: el delimitador debe iniciar en columna 1.' }\r\n      if ($text -match '-f\\s+.*\\{.*\\}') { $issues += 'Uso de -f con llaves {}; duplicar llaves o evitar -f.' }\r\n      [PSCustomObject]@{ Path=$p; Issues= if ($issues){$issues -join '; '} else {'<OK>'} }\r\n    }\r\n  }\r\n}\r\n# [END MODULE: Safety.FenceCheck]\r\n\r\n# [BEGIN MODULE: Reporting.PAVC]\r\nfunction Add-PAVCReport {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$RepoRoot)\r\n  $utc = [DateTime]::UtcNow\r\n  $report = @\"\r\n## Contexto verificado — $($utc.ToString('yyyy-MM-dd'))\r\n- Campos CI (~1500): [Pendiente] — confirmar en UI. **[UI del usuario]**\r\n- Project Instructions (límite/ubicación UI): [Pendiente]. **[UI del usuario]**\r\n- Memoria (global vs project-only): [Pendiente]. **[UI del usuario]**\r\n- Diferencias por plan: [Pendiente; requiere fuentes]. **[Oficial]**\r\n- Notas: verificación con fuentes mediante web.run; este script registra trazabilidad. **[$Script:PAVC_Tag]**\r\n\"@\r\n  $ch = Join-Path $RepoRoot 'CHANGELOG.md'\r\n  Write-Utf8NoBom -Path $ch -Content \"`r`n$report`r`n\" -Append\r\n\r\n  $mirrorDir = '/mnt/data/Repo_AR'\r\n  if (Test-Path -LiteralPath $mirrorDir) {\r\n    $mirror = Join-Path $mirrorDir 'CHANGELOG.md'\r\n    Write-Utf8NoBom -Path $mirror -Content \"`r`n$report`r`n\" -Append\r\n  }\r\n  Append-GlobalChangeLog -Message 'Registro PAVC añadido al CHANGELOG.'\r\n}\r\n# [END MODULE: Reporting.PAVC]\r\n\r\n# [BEGIN MODULE: Project.Checks]\r\nfunction Invoke-ProjectChecks {\r\n  [CmdletBinding(SupportsShouldProcess)]\r\n  param([Parameter(Mandatory)][string]$RepoRoot)\r\n\r\n  $root = Resolve-RepoRoot -RepoRoot $RepoRoot\r\n  Write-Output (\"RepoRoot: {0}\" -f $root)\r\n\r\n  # Estructura esperada (rutas reales)\r\n  $scriptsDir   = Ensure-Directory -Path (Join-Path $root 'SCRIPTS')\r\n  $backupsUpper = Join-Path $scriptsDir 'BACKUPS'\r\n  $backupsLower = Join-Path $scriptsDir 'Backups'\r\n\r\n  if ((Test-Path -LiteralPath $backupsLower) -and -not (Test-Path -LiteralPath $backupsUpper)) {\r\n    if ($PSCmdlet.ShouldProcess($backupsLower,'Renombrar a BACKUPS')) {\r\n      Move-Item -LiteralPath $backupsLower -Destination $backupsUpper -Force\r\n      Write-ChangeLog -TargetPath $backupsUpper -Mode 'Move' -Summary 'Normalización: SCRIPTS\\BACKUPS (mayúsculas)' | Out-Null\r\n    }\r\n  }\r\n  Ensure-Directory -Path $backupsUpper | Out-Null\r\n\r\n  $piPath  = Join-Path $root 'Project_Instructions.md'\r\n  $sopDir  = Join-Path $root 'SOP'\r\n  $sopList = @('SOP_Auditoria_Proyecto.md','SOP_CB_Blindado.md','SOP_Herestrings.md','SOP_AVC.md') | ForEach-Object { Join-Path $sopDir $_ }\r\n\r\n  if (-not (Test-Path -LiteralPath $piPath)) { throw [IO.FileNotFoundException]::new(\"Falta Project_Instructions.md en $root\") }\r\n  if (-not (Test-Path -LiteralPath $sopDir))  { throw [IO.DirectoryNotFoundException]::new(\"Falta carpeta SOP en $root\") }\r\n\r\n  $missing = $sopList | Where-Object { -not (Test-Path -LiteralPath $_) }\r\n  if ($missing) { throw (\"Faltan SOP: \" + ($missing -join ', ')) }\r\n\r\n  # Fence/Here-strings sanity check (reporte)\r\n  $checkPaths = @($piPath) + $sopList\r\n  $report = $checkPaths | Test-FenceSafety | Format-Table -AutoSize | Out-String\r\n  Append-GlobalChangeLog -Message 'Resultados Test-FenceSafety' -Extra $report\r\n\r\n  Add-PAVCReport -RepoRoot $root\r\n  Write-Output \"Verificación aplicada (sin mutaciones de contenido).\"\r\n}\r\n# [END MODULE: Project.Checks]\r\n\r\n# [BEGIN MODULE: QualityGate]\r\nfunction Get-PesterMajor {\r\n  $m = Get-Module -ListAvailable -Name Pester | Sort-Object Version -Descending | Select-Object -First 1\r\n  if ($m) { $m.Version.Major } else { 0 }\r\n}\r\nfunction Get-ThisScriptPath {\r\n  if ($PSCommandPath) { return $PSCommandPath }\r\n  if ($MyInvocation.MyCommand.Path) { return $MyInvocation.MyCommand.Path }\r\n  if ($PSScriptRoot) { return (Join-Path $PSScriptRoot 'Verify_Project.ps1') }\r\n  return $null\r\n}\r\nfunction Invoke-SerintraQualityGate {\r\n  [CmdletBinding()]\r\n  param([switch]$RunPSSA = $false,[switch]$RunPesterInline = $false)\r\n\r\n  $hadFailure = $false\r\n  $scriptPath = Get-ThisScriptPath\r\n\r\n  if ($RunPSSA) {\r\n    $pssa = Get-Module -ListAvailable -Name PSScriptAnalyzer\r\n    if ($pssa) {\r\n      try {\r\n        Write-Output \">> PSSA: Analizando $scriptPath ...\"\r\n        $results = Invoke-ScriptAnalyzer -Path $scriptPath -Recurse -Severity @('Error','Warning')\r\n        if ($results) {\r\n          $hadFailure = $true\r\n          $results | Select-Object RuleName,Severity,ScriptName,Line,Message | Format-Table -AutoSize | Out-String | Write-Output\r\n          Append-GlobalChangeLog -Message \"PSSA halló hallazgos en $scriptPath\"\r\n        } else {\r\n          Write-Output \">> PSSA: Sin hallazgos.\"\r\n        }\r\n      } catch {\r\n        $hadFailure = $true\r\n        Write-Output \">> PSSA: Error — $($_.Exception.Message)\"\r\n        Append-GlobalChangeLog -Message \"PSSA error: $($_.Exception.Message)\"\r\n      }\r\n    } else {\r\n      Write-Output \">> PSScriptAnalyzer no está instalado. Sugerido: Install-Module PSScriptAnalyzer -Scope CurrentUser -Force\"\r\n    }\r\n  }\r\n\r\n  if ($RunPesterInline) {\r\n    $pv = Get-PesterMajor\r\n    if ($pv -ge 5) {\r\n      Write-Output \">> Pester v$pv: ejecutando pruebas inline...\"\r\n      $TempFile = Join-Path $env:TEMP (\"temp_protocol_test_{0}.md\" -f (New-Timestamp))\r\n@\"\r\nA\r\n# [BEGIN SECTION: test]\r\nold\r\n# [END SECTION: test]\r\nZ\r\n\"@ | Set-Content -LiteralPath $TempFile -Encoding UTF8\r\n\r\n      $ScriptBlock = {\r\n        Describe 'HereStrings Utilities (Inline)' {\r\n          It 'crea backup en append' {\r\n            $r = Set-FileContentAppend -Path $using:TempFile -Content \"`nappend\" -Summary 'test append'\r\n            ($r.Backup | Test-Path) | Should -BeTrue\r\n          }\r\n          It 'reemplaza entre marcadores' {\r\n            $r = Set-FileContentReplaceBetweenMarkers -Path $using:TempFile -StartMarker '# [BEGIN SECTION: test]' -EndMarker '# [END SECTION: test]' -NewContent \"new\" -IncludeMarkers\r\n            ($r.Backup | Test-Path) | Should -BeTrue\r\n            (Get-Content -LiteralPath $using:TempFile -Raw) | Should -Match 'new'\r\n          }\r\n        }\r\n      }\r\n      try {\r\n        $res = Invoke-Pester -Script @{ ScriptBlock = $ScriptBlock } -PassThru\r\n        if ($res.FailedCount -gt 0) { $hadFailure = $true; Append-GlobalChangeLog -Message \"Pester inline: pruebas fallidas.\" }\r\n        else { Write-Output \">> Pester: OK.\" }\r\n      } finally { Remove-Item -LiteralPath $TempFile -Force -ErrorAction SilentlyContinue }\r\n    }\r\n    elseif ($pv -gt 0) {\r\n      Write-Output \">> Pester v$pv (legacy): sin pruebas inline; actualiza a v5 para ejecutar este gate.\"\r\n    }\r\n    else {\r\n      Write-Output \">> Pester no está instalado. Sugerido: Install-Module Pester -Scope CurrentUser -Force\"\r\n    }\r\n  }\r\n\r\n  if ($hadFailure) { throw [Exception]::new('Quality Gate falló (PSSA o Pester).') }\r\n}\r\n# [END MODULE: QualityGate]\r\n\r\n# [BEGIN MODULE: Edit.Utils]\r\nfunction New-IncrementalBackup {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$Path)\r\n  $full = Resolve-Path -LiteralPath $Path -ErrorAction Stop\r\n  $f = Get-Item -LiteralPath $full\r\n  $dir = Ensure-Directory -Path (Join-Path $f.DirectoryName 'BACKUPS')\r\n  $bak = Join-Path $dir (\"{0}_{1}.bak\" -f $f.BaseName,(New-Timestamp))\r\n  Copy-Item -LiteralPath $f.FullName -Destination $bak -Force\r\n  $bak\r\n}\r\nfunction Set-FileContentAppend {\r\n  [CmdletBinding()]\r\n  param([Parameter(Mandatory)][string]$Path,[Parameter(Mandatory)][string]$Content,[string]$Summary='Append content')\r\n  $backup = New-IncrementalBackup -Path $Path\r\n  Write-Utf8NoBom -Path $Path -Content $Content -Append\r\n  $cl = Write-ChangeLog -TargetPath $Path -Mode 'Append' -Summary $Summary\r\n  [pscustomobject]@{ Backup=$backup; Changelog=$cl; Path=(Resolve-Path $Path).Path }\r\n}\r\nfunction Set-FileContentReplaceBetweenMarkers {\r\n  [CmdletBinding()]\r\n  param(\r\n    [Parameter(Mandatory)][string]$Path,\r\n    [Parameter(Mandatory)][string]$StartMarker,\r\n    [Parameter(Mandatory)][string]$EndMarker,\r\n    [Parameter(Mandatory)][string]$NewContent,\r\n    [switch]$IncludeMarkers,\r\n    [switch]$All,\r\n    [string]$Summary='Replace between markers'\r\n  )\r\n  $text = Get-Content -LiteralPath $Path -Raw -Encoding UTF8\r\n  $sm = [Regex]::Escape($StartMarker); $em = [Regex]::Escape($EndMarker)\r\n  $pattern = if ($IncludeMarkers) { \"(?s)$sm.*?$em\" } else { \"(?s)(?<=$sm).*?(?=$em)\" }\r\n  if (-not ([Regex]::IsMatch($text,$pattern))) { throw [ArgumentException]::new(\"Marcadores no encontrados en $Path\") }\r\n\r\n  $backup = New-IncrementalBackup -Path $Path\r\n  $replacement = if ($IncludeMarkers) { \"$StartMarker`r`n$NewContent`r`n$EndMarker\" } else { $NewContent }\r\n  $evaluator = [System.Text.RegularExpressions.MatchEvaluator]{ param($m) $replacement }\r\n  $newText = if ($All) { [Regex]::Replace($text,$pattern,$evaluator) } else { [Regex]::Replace($text,$pattern,$evaluator,1) }\r\n\r\n  Write-Utf8NoBom -Path $Path -Content $newText\r\n  $cl = Write-ChangeLog -TargetPath $Path -Mode 'ReplaceBetweenMarkers' -Summary $Summary\r\n  [pscustomobject]@{ Backup=$backup; Changelog=$cl; Path=(Resolve-Path $Path).Path }\r\n}\r\n# [END MODULE: Edit.Utils]\r\n\r\n# [BEGIN MODULE: Orchestration]\r\nfunction Invoke-ProjectVerification {\r\n  [CmdletBinding(SupportsShouldProcess)]\r\n  param([string]$RepoRoot)\r\n\r\n  $root = Resolve-RepoRoot -RepoRoot $RepoRoot\r\n  $Script:GlobalChangeLogPath = Join-Path $root 'CHANGELOG.md'\r\n\r\n  Invoke-ProjectChecks -RepoRoot $root -WhatIf:$false\r\n  Write-Output \"OK — Verify_Project v$Script:Version finalizado. $Script:PAVC_Tag\"\r\n}\r\n# [END MODULE: Orchestration]\r\n\r\n# [BEGIN MODULE: Entrypoint]\r\ntry {\r\n  $resolvedRoot = Resolve-RepoRoot -RepoRoot $RepoRoot\r\n  Invoke-ProjectVerification -RepoRoot $resolvedRoot -WhatIf:$false\r\n  Invoke-SerintraQualityGate -RunPSSA:$RunPSSA -RunPesterInline:$RunInlineTests\r\n}\r\ncatch {\r\n  $msg = \"ERROR — $($_.Exception.Message)\"\r\n  Write-Output $msg\r\n  if ($resolvedRoot) {\r\n    $Script:GlobalChangeLogPath = Join-Path $resolvedRoot 'CHANGELOG.md'\r\n    Append-GlobalChangeLog -Message $msg\r\n  }\r\n  exit 1\r\n}\r\n# [END MODULE: Entrypoint]\r\n'@\r\n\r\n# --- Stub de compatibilidad para el nombre antiguo ---\r\n$StubContent = @'\r\n# Invoke-RepoReorg.ps1 (stub de compatibilidad)\r\n# Redirige a Verify_Project.ps1 conservando parámetros/argumentos.\r\nparam([Parameter(ValueFromRemainingArguments=$true)][object[]]$Args)\r\n$target = Join-Path $PSScriptRoot 'Verify_Project.ps1'\r\nif (-not (Test-Path -LiteralPath $target)) { throw \"Verify_Project.ps1 no encontrado en $PSScriptRoot\" }\r\n& $target @Args\r\n'@\r\n\r\n# --- Escribir nuevo archivo y stub ---\r\nWrite-Utf8NoBom -Path $NewPath -Content $VerifyProjectContent\r\nWrite-Utf8NoBom -Path $OldPath -Content $StubContent\r\n\r\n# --- Registrar en CHANGELOG (Windows y espejo opcional) ---\r\n$logEntry = @\"\r\n--------------------------------------------------------------------------------\r\n$([DateTime]::UtcNow.ToString('u')) — Reorganización modular y renombrado\r\nBackup original: $BackupPath\r\nArchivo nuevo  : $NewPath\r\nStub creado    : $OldPath (redirige a Verify_Project.ps1)\r\nCambios: módulos con marcadores [BEGIN/END MODULE], normalización BACKUPS, reporte PAVC,\r\n         utilidades de edición y logging, Quality Gate opcional (PSSA/Pester), compatibilidad PS5/PS7.\r\n--------------------------------------------------------------------------------\r\n\"@\r\nWrite-Utf8NoBom -Path $ChangelogWin -Content $logEntry -Append\r\nif (Test-Path -LiteralPath (Split-Path -Parent $ChangelogBot)) {\r\n  Write-Utf8NoBom -Path $ChangelogBot -Content $logEntry -Append\r\n}\r\n\r\nWrite-Host \"OK — Verify_Project.ps1 creado y macroscript modularizado.\"\r\nWrite-Host \"  Nuevo: $NewPath\"\r\nWrite-Host \"  Stub : $OldPath\"\r\nWrite-Host \"  Backup: $BackupPath\"\n```"]},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"developer_mode_connector_ids":[],"selected_sources":[],"selected_github_repos":[],"serialization_metadata":{"custom_symbol_offsets":[]},"request_id":"986b270fbc58aec5-ATL","message_source":null,"timestamp_":"absolute"},"recipient":"all","channel":null},"parent":"90269976-14bb-489e-97c6-f3e0035d5765","children":["7dfab5a6-acab-4488-a5ac-ab8533a9de21"]},"7dfab5a6-acab-4488-a5ac-ab8533a9de21":{"id":"7dfab5a6-acab-4488-a5ac-ab8533a9de21","message":{"id":"7dfab5a6-acab-4488-a5ac-ab8533a9de21","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1759145472.4049695,"update_time":null,"content":{"content_type":"model_editable_context","model_set_context":"","repository":null,"repo_summary":null,"structured_context":null},"status":"finished_successfully","end_turn":null,"weight":1,"metadata":{"request_id":"986b270fbc58aec5-ATL","message_type":"next","model_slug":"gpt-5-thinking","default_model_slug":"gpt-5-thinking","thinking_effort":"extended","parent_id":"63d117cf-2a67-4e23-84ec-26ccb9c9b11a","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"63d117cf-2a67-4e23-84ec-26ccb9c9b11a","children":["3bea23c8-b3bf-4476-aecd-3f70c6fc2b99"]},"3bea23c8-b3bf-4476-aecd-3f70c6fc2b99":{"id":"3bea23c8-b3bf-4476-aecd-3f70c6fc2b99","message":{"id":"3bea23c8-b3bf-4476-aecd-3f70c6fc2b99","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1759145473.161684,"update_time":null,"content":{"content_type":"thoughts","thoughts":[{"summary":"Analizando el script de PowerShell","content":"Voy a desglosar el script de PowerShell, explicando su propósito, requisitos, efectos y pasos. Incluiré detalles como los archivos modificados, las carpetas tocadas y el comportamiento de respaldo. También mencionaré cómo el script incrustado Verify_Project.ps1 interactúa con ciertos módulos y verifica cambios como cambios en el archivo CHANGELOG.md y la creación de directorios.","chunks":[],"finished":true},{"summary":"Explicando QualityGate y pruebas","content":"El QualityGate usa PSScriptAnalyzer y pruebas inline de Pester para verificar las funciones Set-FileContentAppend y Set-FileContentReplaceBetweenMarkers, que dependen de Edit.Utils. Se crea un archivo temporal con marcadores para comprobar el reemplazo y la adición de contenido, verificando la creación de respaldos. También realiza una verificación de seguridad, corrige nombres de carpetas y asegura la estructura correcta de archivos y carpetas.","chunks":[],"finished":true},{"summary":"Explicando el script externo","content":"El script establece el modo estricto, define funciones auxiliares y asegura que existan directorios. Realiza un respaldo del archivo antiguo y escribe un nuevo `Verify_Project.ps1`, además de actualizar el historial en `CHANGELOG.md`. Es idempotente; puede reejecutarse sin problemas. Menciona posibles fallos como la ausencia de rutas o permisos.","chunks":[],"finished":true},{"summary":"Explicando el script","content":"El script utiliza `ShouldProcess` para decidir si realiza cambios, pero con `-WhatIf:$false` ejecuta realmente los renombramientos, como los de los backups. Menciona un \"ruta espejo opcional para asistente\" que refleja cambios en su entorno. Destaca uso de [BEGIN MODULE: ...] para modularidad. Se incluyen comandos como `.\\SCRIPTS\\Verify_Project.ps1` como ejemplo.","chunks":[],"finished":true}],"source_analysis_msg_id":"a5b75855-3977-4147-9d3a-d9d522c1b5fc"},"status":"finished_successfully","end_turn":false,"weight":1,"metadata":{"reasoning_status":"is_reasoning","citations":[],"content_references":[],"gizmo_id":"g-p-68da5745bac88191babec8fc5354bcbd","classifier_response":"default","skip_reasoning_title":"Omitir","request_id":"986b270fbc58aec5-ATL","message_type":"next","model_slug":"gpt-5-thinking","default_model_slug":"gpt-5-thinking","thinking_effort":"extended","parent_id":"7dfab5a6-acab-4488-a5ac-ab8533a9de21","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"7dfab5a6-acab-4488-a5ac-ab8533a9de21","children":["509f1e98-e86b-47a3-b5d6-1aedc6c05e9c"]},"509f1e98-e86b-47a3-b5d6-1aedc6c05e9c":{"id":"509f1e98-e86b-47a3-b5d6-1aedc6c05e9c","message":{"id":"509f1e98-e86b-47a3-b5d6-1aedc6c05e9c","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1759145514.322064,"update_time":null,"content":{"content_type":"reasoning_recap","content":"Pensado durante 41s"},"status":"finished_successfully","end_turn":false,"weight":1,"metadata":{"reasoning_status":"reasoning_ended","finished_duration_sec":41,"request_id":"986b270fbc58aec5-ATL","message_type":"next","model_slug":"gpt-5-thinking","default_model_slug":"gpt-5-thinking","thinking_effort":"extended","parent_id":"3bea23c8-b3bf-4476-aecd-3f70c6fc2b99","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":null},"parent":"3bea23c8-b3bf-4476-aecd-3f70c6fc2b99","children":["44fe48be-9c1b-45cb-aee9-0663d533aaf8"]},"44fe48be-9c1b-45cb-aee9-0663d533aaf8":{"id":"44fe48be-9c1b-45cb-aee9-0663d533aaf8","message":{"id":"44fe48be-9c1b-45cb-aee9-0663d533aaf8","author":{"role":"assistant","name":null,"metadata":{}},"create_time":1759145472.404193,"update_time":null,"content":{"content_type":"text","parts":["Aquí va una lectura técnica y práctica del script **Patch-Verify_Project_Modularize.ps1**.\n\n# ¿Qué hace en una frase?\nReemplaza el macroscript original **SCRIPTS\\Invoke-RepoReorg.ps1** por un nuevo script modular **SCRIPTS\\Verify_Project.ps1**, dejando un **stub** con el nombre viejo para compatibilidad, **respalda** el archivo original, y **documenta** los cambios en `CHANGELOG.md` (en el repo y, si existe, en el espejo `/mnt/data/Repo_AR`).\n\n---\n\n# Requisitos clave\n- PowerShell **5.1** mínimo (`#requires -Version 5.1`).\n- Debe existir `C:\\Users\\VictorFabianVeraVill\\Desktop\\Repo_AR\\SCRIPTS\\Invoke-RepoReorg.ps1`.\n- Permisos de escritura en `Repo_AR` y subcarpetas.\n\n---\n\n# Flujo del patch (lo que hace al ejecutarse)\n1. **Configura rutas** (Windows) y una **ruta espejo opcional** del CHANGELOG en `/mnt/data/Repo_AR/CHANGELOG.md`.\n2. Define utilidades:\n   - `New-TS()` (timestamp UTC).\n   - `Ensure-Dir()` (asegura existencia de carpeta).\n   - `Write-Utf8NoBom()` (escritura UTF-8 **sin BOM**, con/ sin append).\n3. **Valida** que exista el script viejo `SCRIPTS\\Invoke-RepoReorg.ps1`; si no, **lanza error** y termina.\n4. **Respalda** el script viejo a `SCRIPTS\\BACKUPS\\Invoke-RepoReorg_<UTC>.bak`.\n5. **Escribe** el nuevo **SCRIPTS\\Verify_Project.ps1** (contenido largo, modular, ver abajo).\n6. **Sobrescribe** `SCRIPTS\\Invoke-RepoReorg.ps1` con un **stub** que reenvía todos los argumentos al nuevo `Verify_Project.ps1`.\n7. **Asienta bitácora**: agrega un bloque con fecha UTC a `CHANGELOG.md` (Windows y espejo si está presente).\n8. Muestra un **resumen en consola** con rutas del nuevo archivo, stub y backup.\n\n> Idempotencia razonable: cada ejecución vuelve a crear backup con timestamp único, reescribe el nuevo script y el stub y **añade** una nueva entrada al changelog.\n\n---\n\n# ¿Qué contiene el nuevo Verify_Project.ps1?\nEs un script **modular** con marcadores `# [BEGIN MODULE: ...]` / `# [END MODULE: ...]` pensado para parches granulares “replace between markers”. Principales piezas:\n\n### 1) Parameters / Globals\n- Parámetros: `-RepoRoot`, `-RunInlineTests`, `-RunPSSA`.\n- Compatibilidad PS 5.1 y 7.x.\n- Defaults (por ejemplo `DefaultRepoRoot` al escritorio del autor).\n- Tag de compatibilidad: `PAVC-Compat (2025-09)`.\n\n### 2) IO.Utils\n- `Write-Utf8NoBom`, `New-Timestamp`.\n- `Resolve-RepoRoot`: toma `-RepoRoot`, variable `ANASTASIS_REPO_ROOT` o default; valida existencia.\n- `Ensure-Directory`: crea carpetas y devuelve ruta normalizada.\n\n### 3) Logging\n- `Append-GlobalChangeLog`: agrega entradas formateadas a `CHANGELOG.md` **global** del repo y (si existe) espejo `/mnt/data/Repo_AR/CHANGELOG.md`.\n- `Write-ChangeLog`: crea un **changelog por archivo** en `<dir>\\Changelogs\\yyyyMMdd_HHmmssfff_<file>_<Mode>.md` y también anota en el global.\n\n### 4) Safety.FenceCheck\n- `Test-FenceSafety`: inspección de texto para “code fences” y here-strings:\n  - Detecta **5 backticks** (sugiere usar 5 tildes `~~~~~`).\n  - Here-strings cerrados con indentación (pide cierre en columna 1).\n  - Uso de `-f` con `{}` (advierte duplicar llaves o evitar).\n- Devuelve objetos con `Path` e `Issues`.\n\n### 5) Reporting.PAVC\n- `Add-PAVCReport`: inyecta en `CHANGELOG.md` un bloque “Contexto verificado” con puntos pendientes (PAVC), tanto en repo como espejo, y registra en global.\n\n### 6) Project.Checks\n- `Invoke-ProjectChecks`:\n  - Resuelve RepoRoot y lo muestra.\n  - **Normaliza** `SCRIPTS\\Backups` → `SCRIPTS\\BACKUPS` (si aplica) y registra en changelog (Mode: `Move`).\n  - Valida estructura mínima:\n    - `Project_Instructions.md`\n    - `SOP\\` y archivos: `SOP_Auditoria_Proyecto.md`, `SOP_CB_Blindado.md`, `SOP_Herestrings.md`, `SOP_AVC.md`.\n    - Si faltan, **lanza error** detallando qué falta.\n  - Corre `Test-FenceSafety` sobre PI y SOP; el reporte se adjunta al **global changelog**.\n  - Llama a `Add-PAVCReport`.\n  - Mensaje final: verificación aplicada **sin mutar contenido** (salvo la normalización de carpeta BACKUPS si era necesaria).\n\n### 7) QualityGate\n- Opcional según flags.\n- `Invoke-SerintraQualityGate`:\n  - **PSScriptAnalyzer** (`-RunPSSA`): analiza el propio script, muestra tabla de hallazgos y marca fallo del gate si hay errores/ warnings.\n  - **Pester v5** (`-RunInlineTests`): crea un archivo temporal con marcadores y prueba utilidades de edición:\n    - `Set-FileContentAppend` (debe crear backup).\n    - `Set-FileContentReplaceBetweenMarkers` (reemplaza entre marcadores, con backup).\n  - Si hay fallos/errores, **lanza excepción** “Quality Gate falló”.\n\n### 8) Edit.Utils\n- `New-IncrementalBackup`: crea backup con timestamp en **BACKUPS** al lado del archivo objetivo.\n- `Set-FileContentAppend`: hace backup incremental, **append** de contenido y registro `Write-ChangeLog(Mode='Append')`.\n- `Set-FileContentReplaceBetweenMarkers`: reemplazo por regex (incluyendo o no marcadores, con opción de reemplazar **primera** o **todas** las coincidencias), backup y `Write-ChangeLog(Mode='ReplaceBetweenMarkers')`.\n\n### 9) Orchestration\n- `Invoke-ProjectVerification`: fija `GlobalChangeLogPath`, llama a `Invoke-ProjectChecks` y anuncia versión/tag.\n\n### 10) Entrypoint\n- `try/catch`:\n  - Resuelve RepoRoot, corre `Invoke-ProjectVerification`.\n  - Corre **QualityGate** según flags.\n  - En error: escribe `ERROR — …`, agrega entrada al **global changelog** y sale con código **1**.\n\n---\n\n# Archivos y carpetas tocadas\n- **Lee/valida**:  \n  - `RepoRoot\\Project_Instructions.md`  \n  - `RepoRoot\\SOP\\{SOP_Auditoria_Proyecto.md, SOP_CB_Blindado.md, SOP_Herestrings.md, SOP_AVC.md}`\n- **Crea/normaliza**:  \n  - `RepoRoot\\SCRIPTS\\Verify_Project.ps1` (nuevo)  \n  - `RepoRoot\\SCRIPTS\\Invoke-RepoReorg.ps1` (**stub**)  \n  - `RepoRoot\\SCRIPTS\\BACKUPS\\Invoke-RepoReorg_<UTC>.bak` (backup del script viejo)  \n  - `RepoRoot\\SCRIPTS\\BACKUPS\\` (si no existe)  \n  - `RepoRoot\\SCRIPTS\\Backups` → renombrado a `BACKUPS` (si existía)  \n  - `RepoRoot\\CHANGELOG.md` (**append** de entradas)  \n  - `<carpeta de cada archivo editado>\\Changelogs\\*.md` (cuando usan utilidades de edición)  \n  - **Espejo opcional**: `/mnt/data/Repo_AR/CHANGELOG.md` (append si existe la carpeta)\n\n---\n\n# Cómo se usa\n1) Ejecutar el **patch** (una sola vez por migración):\n```powershell\n# En Windows PowerShell 5.1+\n.\\Patch-Verify_Project_Modularize.ps1\n```\n\n2) Usar el **nuevo verificador**:\n```powershell\n# Usando RepoRoot por defecto\n.\\SCRIPTS\\Verify_Project.ps1\n\n# O especificando ruta\n.\\SCRIPTS\\Verify_Project.ps1 -RepoRoot 'C:\\Users\\...\\Repo_AR'\n\n# Con gates opcionales\n.\\SCRIPTS\\Verify_Project.ps1 -RunPSSA -RunInlineTests\n```\n\n> El nombre viejo sigue funcionando:\n```powershell\n.\\SCRIPTS\\Invoke-RepoReorg.ps1 -RunPSSA\n```\n…porque ahora es un **stub** que reenvía a `Verify_Project.ps1`.\n\n---\n\n# Errores y casos borde\n- Si **no existe** `SCRIPTS\\Invoke-RepoReorg.ps1`, el patch **falla** (no intenta inventarlo; requiere versionar y dejar stub).\n- Falta de permisos de escritura ⇒ errores al crear backup, escribir nuevos archivos o CHANGELOG.\n- En `Verify_Project.ps1`:\n  - Si faltan `Project_Instructions.md` o los SOP listados ⇒ **lanza error**.\n  - Si no están instalados **PSScriptAnalyzer** o **Pester**, el gate lo informa y:\n    - PSSA: sugiere `Install-Module PSScriptAnalyzer`.\n    - Pester: sugiere `Install-Module Pester`.\n    - Solo **falla** el gate si se pidió correrlos y hubo hallazgos/errores.\n\n---\n\n# Para qué te sirve\n- **Estandariza** el verificador del repo en un script **modular** y parcheable por marcadores.\n- **Conserva compatibilidad** con automatizaciones existentes (mantiene el nombre antiguo como stub).\n- **Audita** estructura mínima del proyecto, **normaliza** `BACKUPS`, y deja **trazabilidad** en changelogs locales y espejo.\n- Incluye un **Quality Gate** optativo para higiene del propio script y helpers de edición.\n\nSi quieres, te preparo una **checklist de validación** para correr tras aplicar el patch y confirmar que todo quedó en orden."]},"status":"finished_successfully","end_turn":true,"weight":1,"metadata":{"finish_details":{"type":"stop","stop_tokens":[200002]},"is_complete":true,"citations":[],"content_references":[],"gizmo_id":"g-p-68da5745bac88191babec8fc5354bcbd","request_id":"986b270fbc58aec5-ATL","message_type":"next","model_slug":"gpt-5-thinking","default_model_slug":"gpt-5-thinking","thinking_effort":"extended","parent_id":"509f1e98-e86b-47a3-b5d6-1aedc6c05e9c","timestamp_":"absolute","model_switcher_deny":[]},"recipient":"all","channel":"final"},"parent":"509f1e98-e86b-47a3-b5d6-1aedc6c05e9c","children":[]}},"moderation_results":[],"current_node":"44fe48be-9c1b-45cb-aee9-0663d533aaf8","plugin_ids":null,"conversation_id":"68da6dfe-0404-832e-bc06-83e27f11c563","conversation_template_id":"g-p-68da5745bac88191babec8fc5354bcbd","gizmo_id":"g-p-68da5745bac88191babec8fc5354bcbd","gizmo_type":"snorlax","is_archived":false,"is_starred":null,"safe_urls":["https://www.openai.com"],"blocked_urls":[],"default_model_slug":"gpt-5-thinking","conversation_origin":null,"voice":null,"async_status":null,"disabled_tool_ids":[],"is_do_not_remember":false,"memory_scope":"project_v2","context_scopes":null,"sugar_item_id":null,"sugar_item_visible":false,"is_study_mode":false,"owner":null}