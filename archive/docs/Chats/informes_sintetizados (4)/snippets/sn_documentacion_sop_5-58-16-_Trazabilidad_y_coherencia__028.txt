Aquí tienes un método breve y efectivo para comprobar coherencia entre **Instrucciones del proyecto** y **archivos de referencia**:

1. **Inventario y descomposición**

   * Lista los archivos (título, fecha, versión) y **divide las instrucciones en “cláusulas atómicas”** (una regla o criterio por línea, con ID).

2. **Matriz de trazabilidad (instrucción → evidencia)**

   * Para cada cláusula, identifica **dónde vive la evidencia** (archivo, sección/página) y su **vigencia** (fecha/versión).
   * Usa esta tabla y marca estado:

   | ID   | Instrucción (resumida) | Evidencia (archivo + sección)  | Vigencia   | Estado    | Nota/Fix                           |
   | ---- | ---------------------- | ------------------------------ | ---------- | --------- | ---------------------------------- |
   | I-01 | “Usar tono formal”     | `Guía_Estilo v3.pdf §2`        | 2025-07-10 | OK        | —                                  |
   | I-02 | “Umbral = 0.75”        | `Spec_Modelo.xlsx hoja Config` | 2024-11-02 | CONFLICTO | En `README.md` dice 0.70; unificar |

3. **Criterios de coherencia (úsalos como checklist)**

   * **Consistencia:** no hay contradicciones entre instrucciones y archivos (números, definiciones, pasos).
   * **Completitud:** toda instrucción tiene evidencia; si falta, crear/actualizar el archivo fuente.
   * **Vigencia (recency):** la instrucción referencia **versiones/fechas actuales**; evita citar documentos obsoletos.
   * **Precedencia:** define jerarquía (p. ej., “Spec_v3 > Manual_v2 > Notas”).
   * **Aplicabilidad:** el modelo puede ejecutar la instrucción con lo que hay en archivos (sin ambigüedad).

4. **Pruebas de comportamiento (golden tests)**

   * Diseña 5–10 **tareas representativas** (inputs reales).
   * Evalúa si la salida **cumple cada cláusula** (tono, fuentes, límites, pasos).
   * Si falla: ajusta **instrucciones** (más claras/prioridades) o **archivos** (corrige dato/versión).

5. **Automatización ligera dentro del Proyecto (útil para iterar)**
   Pega este prompt en un chat del Proyecto con los archivos cargados:

   ```
   Actúa como verificador de coherencia. 
   1) Extrae una lista numerada de cláusulas atómicas de las Instrucciones del proyecto.
   2) Para cada cláusula, busca evidencia en los archivos del proyecto (cita archivo y sección/página).
   3) Produce la matriz: ID | Instrucción | Evidencia | Vigencia | Estado (OK/CONFLICTO/FALTA) | Nota/Fix.
   4) Señala contradicciones y sugiere la fuente canónica (según precedencia).
   5) Propón 3 pruebas breves para validar tras los cambios.
   ```

   *(Opcional)* Añade en las Instrucciones: **“Si hay conflicto, prioriza `Spec_Producto vX` por fecha más reciente; nunca uses documentos sin fecha.”*

6. **Cierre y mantenimiento**

   * Ejecuta fixes (unificar números, actualizar versiones, eliminar duplicados).
   * **Sella la coherencia**: actualiza las Instrucciones con “fuentes canónicas” y **fechas ISO**.
   * Repite el check **tras cada cambio de archivo clave** o en cadencia semanal.