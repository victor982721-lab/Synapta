#requires -Version 5.0
<#
Prop칩sito: Mostrar un aviso animado en WPF con texto personalizable y emoji.
Par치metros:
  -Text        : Mensaje a mostrar. Por defecto un texto neutral con 游땥
  -DurationSec : Segundos visibles antes de desvanecer. 1..10 (predeterminado 3)
Ejemplos:
  .\Aviso.ps1
  .\Aviso.ps1 -Text "Vamos por tacos y refrescos 游땥" -DurationSec 4
Validaci칩n: Requiere PowerShell 5 y modo STA para WPF.
#>

[CmdletBinding()]
param(
  [Parameter(Position=0)]
  [ValidateNotNullOrEmpty()]
  [string]$Text = "Mensaje r치pido con onda 游땥",

  [ValidateRange(1,10)]
  [int]$DurationSec = 3
)

# Relanzar en STA si es necesario
try {
  if ([System.Threading.Thread]::CurrentThread.GetApartmentState() -ne [System.Threading.ApartmentState]::STA) {
    $argsList = @()
    if ($PSBoundParameters.ContainsKey('Text'))        { $argsList += '-Text';        $argsList += $Text }
    if ($PSBoundParameters.ContainsKey('DurationSec')) { $argsList += '-DurationSec'; $argsList += $DurationSec }
    Start-Process -FilePath 'powershell.exe' -ArgumentList @('-NoProfile','-ExecutionPolicy','Bypass','-Sta','-File',"`"$PSCommandPath`"") + $argsList | Out-Null
    return
  }

  $ErrorActionPreference = 'Stop'
  Add-Type -AssemblyName PresentationCore, PresentationFramework, WindowsBase

  $xaml = @"
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        WindowStyle="None" AllowsTransparency="True" Background="#00FFFFFF"
        ShowInTaskbar="False" Topmost="True" ResizeMode="NoResize"
        WindowStartupLocation="CenterScreen" SizeToContent="WidthAndHeight">
  <Border CornerRadius="16" Background="#F0222222" Padding="22" Margin="0" >
    <Grid RenderTransformOrigin="0.5,0.5">
      <Grid.RenderTransform>
        <ScaleTransform ScaleX="1" ScaleY="1"/>
      </Grid.RenderTransform>
      <TextBlock x:Name="Msg" TextWrapping="Wrap" TextAlignment="Center"
                 Foreground="White" FontFamily="Segoe UI" FontSize="22" />
    </Grid>
  </Border>
</Window>
"@

  [xml]$xml = $xaml
  $reader  = New-Object System.Xml.XmlNodeReader $xml
  $window  = [Windows.Markup.XamlReader]::Load($reader)

  $msg = $window.FindName('Msg')
  $msg.Text = $Text

  # Estado inicial
  $window.Opacity = 0

  # Animaciones
  $window.Loaded.Add({
    param($s, $e)

    # Efecto "pop" + fundido
    $easeIn  = New-Object System.Windows.Media.Animation.QuadraticEase
    $easeOut = New-Object System.Windows.Media.Animation.QuadraticEase
    $easeOut.EasingMode = [System.Windows.Media.Animation.EasingMode]::EaseOut

    $fadeIn = New-Object System.Windows.Media.Animation.DoubleAnimation(0,1,[TimeSpan]::FromMilliseconds(250))
    $fadeIn.EasingFunction = $easeIn
    $s.BeginAnimation([System.Windows.Window]::OpacityProperty, $fadeIn)

    $scaleAnim = New-Object System.Windows.Media.Animation.DoubleAnimation(0.9,1,[TimeSpan]::FromMilliseconds(200))
    $scaleAnim.EasingFunction = $easeOut
    $grid = ($s.Content) # Border -> Grid
    $grid.RenderTransform.BeginAnimation([System.Windows.Media.ScaleTransform]::ScaleXProperty, $scaleAnim)
    $grid.RenderTransform.BeginAnimation([System.Windows.Media.ScaleTransform]::ScaleYProperty, $scaleAnim)

    # Programar cierre con desvanecimiento
    $timer = New-Object System.Windows.Threading.DispatcherTimer
    $timer.Interval = [TimeSpan]::FromSeconds($DurationSec)
    $timer.Add_Tick({
      $timer.Stop()
      $fadeOut = New-Object System.Windows.Media.Animation.DoubleAnimation(1,0,[TimeSpan]::FromMilliseconds(220))
      $fadeOut.Completed.Add({ $s.Close() })
      $s.BeginAnimation([System.Windows.Window]::OpacityProperty, $fadeOut)
    })
    $timer.Start()
  })

  $null = $window.ShowDialog()
}
catch {
  Write-Error ("Error: " + $_.Exception.Message)
}